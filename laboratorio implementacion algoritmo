{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BRAYANMOISESMORENOTAUTIVA/Curso.Prep.Henry/blob/master/laboratorio%20implementacion%20algoritmo\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "w=[[0,1,1,0],[1,0,0,0],[0,1,0,1],[1,0,1,0]]"
      ],
      "metadata": {
        "id": "fUANus3t3W5q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for k in range(4):\n",
        "  print(\"w[{}]=\".format(k+1))\n",
        "  for i in range(4):\n",
        "    for j in range(4):\n",
        "      w[i][j] = w[i][j] or (w[i][k] and w[k][j])\n",
        "      print(w[i])\n",
        "\n",
        "      "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PJT1Shb34QlI",
        "outputId": "d7f44133-9c48-42e6-c2bb-a007b2e2bc5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "w[1]=\n",
            "[0, 1, 1, 0]\n",
            "[0, 1, 1, 0]\n",
            "[0, 1, 1, 0]\n",
            "[0, 1, 1, 0]\n",
            "[1, 0, 0, 0]\n",
            "[1, 1, 0, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[0, 1, 0, 1]\n",
            "[0, 1, 0, 1]\n",
            "[0, 1, 0, 1]\n",
            "[0, 1, 0, 1]\n",
            "[1, 0, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "w[2]=\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 0, 1]\n",
            "[1, 1, 0, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "w[3]=\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 0]\n",
            "[1, 1, 1, 1]\n",
            "w[4]=\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n",
            "[1, 1, 1, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Results"
      ],
      "metadata": {
        "id": "Q8Jvwe4Ahncx"
      }
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [],
      "name": "Copia de NeMo voice swap app",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}